// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// MODELS 

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  email   String   @unique
  hash    String
  profile Profile?

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt

  bio        String?
  urls       String[]
  profession String?
  handle     String?
  avatarUrl  String?
  firstName  String?
  lastName   String?
  hexAddress String?

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  followedBy Follows[] @relation("following")
  following  Follows[] @relation("follower")

  searches_history Search[]

  subscriptions Sub[]
  favorites     Fav[]
  userFavOf     FavUsers[] @relation("fav")
  userFavs      FavUsers[] @relation("favOf")

  @@map("profiles")
}

model Follows {
  follower    Profile @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   Profile @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model FavUsers {
  favOf   Profile @relation("favOf", fields: [favOfId], references: [id])
  favOfId Int
  fav     Profile @relation("fav", fields: [favId], references: [id])
  favId   Int

  @@id([favOfId, favId])
}

model Search {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  query     String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  bookmarkedInFavs Fav[]

  intents  NLPIntentDecoded[]
  entities NLPEntityDecoded[]
  tags     NLPTagDecoded[]

  @@map("searches")
}

model Sub {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  intents  NLPIntentDecoded[]
  entities NLPEntityDecoded[]
  tags     NLPTagDecoded[]

  contracts HexAddress[]

  @@map("subscriptions")
}

model Fav {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  intents  NLPIntentDecoded[]
  entities NLPEntityDecoded[]
  tags     NLPTagDecoded[]

  contracts HexAddress[]

  searches Search? @relation(fields: [searchId], references: [id])
  searchId Int?

  @@map("favorites")
}

model NLPIntent {
  id      Int    @id @default(autoincrement())
  witUuid String @unique
  name    String @unique

  nlpIntents NLPIntentDecoded[]

  @@map("intents")
}

model NLPEntity {
  id      Int    @id @default(autoincrement())
  witUuid String @unique
  name    String @unique

  nlpEntities NLPEntityDecoded[]

  @@map("entities")
}

model NLPTag {
  id      Int     @id @default(autoincrement())
  witUuid String? @unique
  name    String  @unique

  nlpTags NLPTagDecoded[]

  @@map("tags")
}

model NLPIntentDecoded {
  id    Int    @id @default(autoincrement())
  value String

  nlpIntent   NLPIntent @relation(fields: [nlpIntentId], references: [id])
  nlpIntentId Int

  bookmarkedInSubs Sub[]
  bookmarkedInFavs Fav[]

  Search   Search @relation(fields: [searchId], references: [id])
  searchId Int

  @@map("intents_decoded")
}

model NLPEntityDecoded {
  id     Int      @id @default(autoincrement())
  values String[]

  nlpEntity   NLPEntity @relation(fields: [nlpEntityId], references: [id])
  nlpEntityId Int

  bookmarkedInFavs Fav[]
  bookmarkedInSubs Sub[]

  Search   Search @relation(fields: [searchId], references: [id])
  searchId Int

  @@map("entities_decoded")
}

model NLPTagDecoded {
  id     Int      @id @default(autoincrement())
  values String[]

  nlpTag   NLPTag @relation(fields: [nlpTagId], references: [id])
  nlpTagId Int

  bookmarkedInFavs Fav[]
  bookmarkedInSubs Sub[]

  Search   Search @relation(fields: [searchId], references: [id])
  searchId Int

  @@map("tags_decoded")
}

model HexAddress {
  id       Int     @id @default(autoincrement())
  meta     String?
  contract String  @unique

  bookmarkedInSubs Sub[]
  bookmarkedInFavs Fav[]

  @@map("addresses")
}
